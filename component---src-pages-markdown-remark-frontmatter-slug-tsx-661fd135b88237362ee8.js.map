{"version":3,"file":"component---src-pages-markdown-remark-frontmatter-slug-tsx-661fd135b88237362ee8.js","mappings":"0MAGO,IAAMA,EAAe,0CAIfC,GAAcC,EAAAA,EAAAA,IAAH,6BAEFC,EAAAA,EAFE,+D,UCJXC,GAAQF,EAAAA,EAAAA,IAAH,oBACMC,EAAAA,EADN,8ECoBlB,EAZa,SAACE,GACV,IAAOC,EAAQD,EAARC,KAEP,OAAO,mBACFA,EAAKC,KAAI,SAAAC,GACN,OAAO,QAAC,KAAD,CAAMC,GAAE,SAAWD,EAAOE,IAAKF,EAAKN,IAAKS,GAC3CH,QCyEjB,EAnD6B,SAACH,GAC1B,IACOO,EADQP,EAARQ,KACAD,eACAE,EAAqBF,EAArBE,YAAaC,EAAQH,EAARG,KAEdC,GAAU,oBACZ,oBACI,QAAC,IAAD,CACIC,MAAOH,EAAYI,YAAYC,gBAAgBF,MAC/CG,IAAKN,EAAYO,eACjBC,MAAO,CAACC,OAAQ,SAChBC,SAAU,CAACC,UAAW,aAEzBX,EAAYY,qBAAqBC,OAAS,IAC3C,eAAKzB,IAAKS,IACN,kCAAkBG,EAAYY,yBAItC,eAAKxB,IAAK0B,EAAAA,MACV,oBACI,kBAAKd,EAAYe,YACjB,iBACKf,EAAYgB,SAEjB,mCACoBhB,EAAYiB,iBAGpC,eAAK7B,IAAK0B,EAAAA,MACV,eACII,UAAU,oBACVC,wBAAyB,CAACC,OAAQnB,GAClCb,IAAKS,KAET,eAAKT,IAAKiC,EAAAA,MACV,QAAC,EAAD,CAAM7B,KAAMQ,EAAYR,QAG5B,OACI,oBACI,QAAC8B,EAAA,EAAD,MACI,gBAAMC,QAAQ,WACd,gBAAMC,KAAK,WAAWtB,QAAQ,yCAC9B,uCAAuBF,EAAYe,aAEvC,QAACU,EAAA,EAAD,CAAYvB,QAASA","sources":["webpack://website/./src/PageComponents/MarkdownPages/MarkdownPages.styles.ts","webpack://website/./src/components/Tags/Tags.styles.ts","webpack://website/./src/components/Tags/Tags.tsx","webpack://website/./src/pages/{MarkdownRemark.frontmatter__slug}.tsx"],"sourcesContent":["import {css} from \"@emotion/react\";\nimport {greyLight} from \"../../styles\";\n\nexport const imageSourceText = css`\n    text-align: right;\n`;\n\nexport const markdownDiv = css`\n    .language-text {\n        background: ${greyLight};\n        color: initial;\n        padding: 0.2em 0.4em;\n        text-shadow: initial;\n    }\n`;\n","import {css} from \"@emotion/react\";\nimport {greyLight} from \"../../styles\";\n\nexport const links = css`\n    background-color: ${greyLight};\n    border-radius: 4px;\n    display: inline-block;\n    margin: 0 8px 0 0;\n    padding: 0 8px;\n`;\n","/* @jsx jsx */\nimport {jsx} from \"@emotion/react\"\n\nimport {Link} from \"gatsby\";\n\nimport * as styles from \"./Tags.styles\";\n\ninterface TagsProps {\n    tags: string[]\n}\n\nconst Tags = (props: TagsProps) => {\n    const {tags} = props;\n\n    return <div>\n        {tags.map(tag => {\n            return <Link to={`/tags/${tag}`} key={tag} css={styles.links}>\n                {tag}\n            </Link>\n        })}\n    </div>\n}\n\nexport default Tags\n","/* @jsx jsx */\nimport {jsx} from \"@emotion/react\"\n\nimport {Helmet} from \"react-helmet\"\nimport {graphql} from \"gatsby\"\nimport PageLayout from \"../components/PageLayout\";\nimport Img from \"gatsby-image\";\n\nimport * as styles from \"../PageComponents/MarkdownPages/MarkdownPages.styles\";\nimport {spacing32, spacing8} from \"../styles\";\nimport Tags from \"../components/Tags/Tags\";\n\ninterface BlogPageTemplateProps {\n    data: {\n        markdownRemark: {\n            frontmatter: {\n                headerImage: {\n                    childImageSharp: {\n                        fluid: {\n                            base64: string;\n                            aspectRatio: number;\n                            src: string;\n                            srcSet: string;\n                            sizes: string;\n                        }\n                    }\n                };\n                headerImageAlt: string;\n                headerImageCopyright: string;\n                pageTitle: string;\n                author: string;\n                last_modified: string;\n                tags: string[];\n            }\n            html: string;\n        }\n    };\n}\n\nconst MarkdownPageTemplate = (props: BlogPageTemplateProps) => {\n    const {data} = props;\n    const {markdownRemark} = data\n    const {frontmatter, html} = markdownRemark\n\n    const content = <div>\n        <div>\n            <Img\n                fluid={frontmatter.headerImage.childImageSharp.fluid}\n                alt={frontmatter.headerImageAlt}\n                style={{height: \"405px\"}}\n                imgStyle={{objectFit: \"contain\"}}\n            />\n            {frontmatter.headerImageCopyright.length > 0 &&\n            <div css={styles.imageSourceText}>\n                <small>Image by: {frontmatter.headerImageCopyright}</small>\n            </div>\n            }\n        </div>\n        <div css={spacing8}/>\n        <div>\n            <h1>{frontmatter.pageTitle}</h1>\n            <p>\n                {frontmatter.author}\n            </p>\n            <p>\n                Last modified: {frontmatter.last_modified}\n            </p>\n        </div>\n        <div css={spacing8}/>\n        <div\n            className=\"blog-post-content\"\n            dangerouslySetInnerHTML={{__html: html}}\n            css={styles.markdownDiv}\n        />\n        <div css={spacing32}/>\n        <Tags tags={frontmatter.tags}/>\n    </div>\n\n    return (\n        <div>\n            <Helmet>\n                <meta charSet=\"utf-8\"/>\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/>\n                <title>Arshi Annafi | {frontmatter.pageTitle}</title>\n            </Helmet>\n            <PageLayout content={content}/>\n        </div>\n    )\n}\n\nexport default MarkdownPageTemplate;\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        headerImage {\n          childImageSharp {\n            fluid(maxHeight: 500) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        headerImageAlt\n        headerImageCopyright\n        pageTitle\n        author\n        last_modified(formatString: \"YYYY-MM-DD\")\n        tags\n      }\n    }\n  }\n`\n"],"names":["imageSourceText","markdownDiv","css","greyLight","links","props","tags","map","tag","to","key","styles","markdownRemark","data","frontmatter","html","content","fluid","headerImage","childImageSharp","alt","headerImageAlt","style","height","imgStyle","objectFit","headerImageCopyright","length","spacing8","pageTitle","author","last_modified","className","dangerouslySetInnerHTML","__html","spacing32","Helmet","charSet","name","PageLayout"],"sourceRoot":""}